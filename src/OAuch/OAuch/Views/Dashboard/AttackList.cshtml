@using OAuch.OAuthThreatModel.Attackers
@using OAuch.OAuthThreatModel.Enrichers
@using OAuch.OAuthThreatModel.Threats
@using OAuch.Shared.Enumerations
@using Microsoft.AspNetCore.Html
@using OAuch.OAuthThreatModel
@using System.Text
@model AttacksViewModel
@{
    Layout = null;

    IHtmlContent CreateAttackerOption(AttackerType attacker) {
        var isSelected = Model.SelectedFilter?.Any(c => c == attacker.Id) ?? false;
        string dataContent = $"<div class='od'><strong>{attacker.Name}</strong></div>";
        return new HtmlString($"<option value=\"{attacker.Id}\" title=\"{attacker.Id}\" data-content=\"{dataContent}\"{(isSelected ? " selected" : "")}></option>");
    }
    IHtmlContent CreateFlowOption(ModelElement flow) {
        var isSelected = Model.SelectedFilter?.Any(c => c == flow.Id) ?? false;
        string dataContent = $"<div class='od'><strong>{flow.Description}</strong></div>";
        return new HtmlString($"<option value=\"{flow.Id}\" title=\"{flow.Id}\" data-content=\"{dataContent}\"{(isSelected ? " selected" : "")}></option>");
    }
    IHtmlContent CreateThreatOption(ModelElement threat) {
        var isSelected = Model.SelectedFilter?.Any(c => c == threat.Id) ?? false;
        string dataContent = $"<div class='od'><strong>{threat.Id}</strong><br/><em>{threat.Description}</em></div>";
        return new HtmlString($"<option value=\"{threat.Id}\" title=\"{threat.Id}\" data-content=\"{dataContent}\"{(isSelected ? " selected" : "")}></option>");
    }
    string GetAttackerTypes(Threat t) {
        var sb = new StringBuilder();
        sb.Append("A vulnerability can be exploited by ");
        for(int i = 0; i < t.Attackers.Length; i++) {
            if (i == t.Attackers.Length - 1 && t.Attackers.Length > 1)
                sb.Append("and ");
            sb.Append(t.Attackers[i].Name);
            if (i < t.Attackers.Length - 1)
                sb.Append(", ");
        }
        sb.Append('.');
        return sb.ToString();
    }
}
@if (Model.AttackReport.AttackChains.Count == 0) {
    <p>No potential attack scenarios could be found.</p>
    var hasFlows = Model.AllFlows.Any(c => Model.SelectedFilter?.Contains(c.Id) ?? false);
    var hasUnmitigatedThreats = Model.AllUnmitigatedThreats.Any(c => Model.SelectedFilter?.Contains(c.Id) ?? false);
    var hasPartialThreats = Model.AllPartialThreats.Any(c => Model.SelectedFilter?.Contains(c.Id) ?? false);
    var hasThreats = hasUnmitigatedThreats || hasPartialThreats;
    var hasAttackers = Model.AttackerTypes.Any(c => Model.SelectedFilter?.Contains(c.Id) ?? false);
    if (!hasFlows || !hasThreats || !hasAttackers) {
        <ul class="text-danger">
            @if (!hasFlows) {
                <li>You have not selected any authorization grant.</li>            
            }
            @if (!hasAttackers) {
                <li>You have not selected any attacker type.</li>
            }
            @if (!hasThreats) {
                <li>You have not selected any threat.</li>
            }
        </ul>
    }

} else if (Model.AttackReport.AttackChains.Count == Model.AttackReport.MaxResults) {
    <p>Only the first @Model.AttackReport.MaxResults attack scenarios are shown. You may want to filter out some Threats and/or Authorization Grants.</p>
}
<div id="ElementsFilter" class="form-group">
    <select id="SelectedFilter" name="SelectedFilter" class="selectpicker show-tick" data-width="100%" multiple="multiple">
        <optgroup label="Authorization Grants">
            @foreach (var f in Model.AllFlows) {
                <text>@CreateFlowOption(f)</text>
            }
        </optgroup>
        <optgroup label="Attacker Types">
            @foreach (var at in Model.AttackerTypes) {
                <text>@CreateAttackerOption(at)</text>
            }
        </optgroup>
        <optgroup label="Unmitigated Threats">
            @foreach (var t in Model.AllUnmitigatedThreats) {
                <text>@CreateThreatOption(t)</text>
            }
        </optgroup>
        <optgroup label="Partially Mitigated Threats">
            @foreach (var t in Model.AllPartialThreats) {
                <text>@CreateThreatOption(t)</text>
            }
        </optgroup>
    </select>
</div>
<button class="btn btn-secondary" type="submit">Apply Filter</button>
<script>
    $('#SelectedFilter').selectpicker(
        {
            tickIcon: 'fa-check',
            iconBase: 'fas',
            selectedTextFormat: 'count'
        });
</script>

<p>&nbsp;</p>
<p>@Model.AttackReport.AttackChains.Count attack scenarios have been found.</p>
@for (int i = 0; i < Model.AttackReport.AttackChains.Count; i++) {
    var chain = Model.AttackReport.AttackChains[i];
    <div class="card collapsed-card">
        <div class="card-header bg-lightgray">
            <div class="card-tools leftcardtools">
                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
            <h3 class="card-title">
                <strong>Attack Scenario #@(i + 1)</strong><br />
                <em>Uses @(chain.Elements.Count(c => c is Threat)) step(s) to attack the @chain.Flow.Description</em>
            </h3>
        </div>
        <div class="card-body" style="display: none;">
            <div class="timeline">
                <div class="time-label"><span class="bg-gray">The client uses the @chain.Flow.Description</span></div>
                @for (int j = 1; j < chain.Elements.Count; j++) {
                    var el = chain.Elements[j];
                    if (el is Enricher) {
                        <div class="tic"><i class="fas fa-info bg-info"></i><div class="timeline-item"><h3 class="timeline-header bg-lightgray">@el.Description</h3></div></div>
                    } else if (el is Threat) {
                        var bg = "bg-warning"; // default to partially mitigated
                        var ot = Model.ThreatReports[el.Id];
                        if (ot.Outcome == TestOutcomes.SpecificationNotImplemented) { // unmitigated threat
                            bg = "bg-red";
                        }
                        <div class="tic">
                            <i class="fas fa-unlock @bg"></i>
                            <div class="timeline-item">
                                <h3 class="timeline-header bg-lightgray"><strong>@el.Description</strong> @Html.ActionLink($"[{el.Id}]", "Info", "Threats", new { id = el.Id }, new { target = "_blank" })</h3>
                                <div class="timeline-body">
                                    <p>@ot.Threat.Description</p>
                                    <p>
                                    @if (ot.Outcome == TestOutcomes.SpecificationNotImplemented) {
                                        <text>This threat is <strong>NOT</strong> mitigated.</text>
                                    } else if (ot.Outcome == TestOutcomes.SpecificationPartiallyImplemented) {
                                        <text>This threat is <strong>PARTIALLY</strong> mitigated.</text>
                                    }
                                    @if (el is Threat) {
                                        <text> @GetAttackerTypes((Threat)el)</text>
                                    }
                                    </p>
                                    <p>If the attacker succeeds in exploiting this threat, they will gain the following advantage:</p>
                                    <ul>
                                        @foreach (var c in el.Consequences) {
                                            <li>@c.Name</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                }
                @foreach (var vul in chain.Vulnerabilities) {
                    <div class="tic"><i class="fas fa-skull-crossbones bg-red"></i><div class="timeline-item"><h3 class="timeline-header bg-red">@vul.Name</h3></div></div>
                }
            </div>
        </div>
    </div>
}