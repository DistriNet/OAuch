@model OAuch.ViewModels.CertificatesViewModel
@{
    ViewData["Title"] = "Certificates";
}
<div class="row">
    <div class="col-12 col-lg-10 col-xl-8">
        <h1 class="display-4">Client certificates</h1>
        <p>
            Depending on the security requirements, some OAuth servers require clients to authenticate using X509 client certificates.
            You can upload your certificates here and then select them in the site settings. When a
            site is configured to use a client certificate, OAuch assumes that having a client certificate is required. If the server
            then allows a connection without a client certificate, this will be seen as an error.
        </p>
        <h4>Uploaded certificates</h4>
        @if (Model.Certificates == null || Model.Certificates.Count == 0) {
            <p>You have not yet uploaded X509 certificates that can be used as client certificates.</p>
        } else {
            <p>You have uploaded the following X509 client certificates:</p>
            <ul>
                @foreach (var c in Model.Certificates) {
                    <li>@c.Name [@Html.ActionLink("remove", "DeleteCertificate", new { id = c.SavedCertificateId }, new { onclick = "return confirm('Are you sure you wish to remove the selected certificate?')" })]</li>
                }
            </ul>
        }

        <h4>Upload a new certificate</h4>
        <p>
            You can upload client certificates as PKCS#12 files (*.pfx or *.p12). If the private key in the file is encrypted,
            you must also provide the password to decrypt the key.
        </p>
        <div asp-validation-summary="All" class="text-danger"></div>
        @using (Html.BeginForm("Certificates", "Dashboard", FormMethod.Post, new { enctype = "multipart/form-data" })) {
            <div class="form-group">
                <label for="file">PKCS#12 file</label>
                <div class="input-group">
                    <div class="custom-file">
                        @Html.TextBox("file", "", new { type = "file", @class = "custom-file-input" })
                        <label class="custom-file-label" for="file">Choose file</label>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="Password">Password</label>
                @Html.PasswordFor(c => c.Password, new { @class = "form-control" })
            </div>
            <button type="submit" class="btn btn-primary">Add</button>
        }
    </div>
</div>
@section Scripts {
    <script>
        $(".custom-file-input").on("change", function() {
          var fileName = $(this).val().split("\\").pop();
          $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
        });
    </script>
}